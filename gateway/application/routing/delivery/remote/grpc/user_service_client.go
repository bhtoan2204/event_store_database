// Code generated by scaffolds. DO NOT EDIT.
package grpc

import (
	"fmt"

	"event_sourcing_gateway/package/settings"
	"event_sourcing_gateway/proto/user"

	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/resolver"

	"event_sourcing_gateway/package/grpc"
	"event_sourcing_gateway/package/monitor"
	"event_sourcing_gateway/package/svcdisc"
)

func (client *userServiceClient) initMethodRegistry() {
	client.methodRegistry = map[string]func(interface{}, map[string]string) (interface{}, error){
		"CreateUser": client.createUser,
		"Login":      client.login,
		"Refresh":    client.refresh,
	}
}

type userServiceClient struct {
	grpcClient     user.UserServiceClient
	methodRegistry map[string]func(interface{}, map[string]string) (interface{}, error)
}

func NewUserServiceClient(config *settings.Config) *userServiceClient {
	// using WithInsecure() because no SSL running
	consul := svcdisc.NewConsul(config)
	resolver.Register(consul.NewResolverBuilder(config.Service.UserServiceName))

	cc, err := grpc.CreateGRPCClientConn(
		fmt.Sprintf("consul:///%s", config.Service.UserServiceName),
		false,
	)
	if err != nil {
		fmt.Println("Could not connect:", err)
		return nil
	}

	client := userServiceClient{
		grpcClient: user.NewUserServiceClient(cc),
	}
	client.initMethodRegistry()

	return &client
}

func (client *userServiceClient) GetMethodRegistry() map[string]func(interface{}, map[string]string) (interface{}, error) {
	return client.methodRegistry
}

func (client *userServiceClient) createUser(data interface{}, md map[string]string) (interface{}, error) {
	ctx := monitor.GetApmContext()
	//ctx := context.Background()
	for k, v := range md {
		ctx = metadata.AppendToOutgoingContext(ctx, k, v)
	}
	return client.grpcClient.CreateUser(ctx, data.(*user.CreateUserRequest))
}

func (client *userServiceClient) login(data interface{}, md map[string]string) (interface{}, error) {
	ctx := monitor.GetApmContext()
	//ctx := context.Background()
	for k, v := range md {
		ctx = metadata.AppendToOutgoingContext(ctx, k, v)
	}
	return client.grpcClient.Login(ctx, data.(*user.LoginRequest))
}

func (client *userServiceClient) refresh(data interface{}, md map[string]string) (interface{}, error) {
	ctx := monitor.GetApmContext()
	//ctx := context.Background()
	for k, v := range md {
		ctx = metadata.AppendToOutgoingContext(ctx, k, v)
	}
	return client.grpcClient.Refresh(ctx, data.(*user.RefreshTokenRequest))
}
