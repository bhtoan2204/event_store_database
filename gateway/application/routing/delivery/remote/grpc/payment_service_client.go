// Code generated by scaffolds. DO NOT EDIT.
package grpc

import (
	"fmt"

	"google.golang.org/grpc/metadata"

	"event_sourcing_gateway/package/settings"
	"event_sourcing_gateway/proto/payment"

	"context"
	"event_sourcing_gateway/package/grpc"
	"event_sourcing_gateway/package/monitor"
	"event_sourcing_gateway/package/svcdisc"
	"github.com/hashicorp/consul/api"
)

func (client *paymentServiceClient) initMethodRegistry() {
	client.methodRegistry = map[string]func(interface{}, map[string]string) (interface{}, error){
		"GetBalance": client.getBalance,
	}
}

type paymentServiceClient struct {
	grpcClient     payment.PaymentServiceClient
	methodRegistry map[string]func(interface{}, map[string]string) (interface{}, error)
	svcdisc        *api.AgentService
}

func NewPaymentServiceClient(config *settings.Config) *paymentServiceClient {
	// using WithInsecure() because no SSL running
	consul := svcdisc.NewConsul(config)
	service, err := consul.GetService(context.Background(), config.Service.PaymentServiceName)
	if err != nil {
		fmt.Println("Could not get service:", err)
	}

	cc, err := grpc.CreateGRPCClientConn(config.Service.PaymentServiceName, false)
	if err != nil {
		fmt.Println("Could not connect:", err)
	}

	client := paymentServiceClient{
		grpcClient: payment.NewPaymentServiceClient(cc),
		svcdisc:    service,
	}
	client.initMethodRegistry()

	return &client
}

func (client *paymentServiceClient) GetMethodRegistry() map[string]func(interface{}, map[string]string) (interface{}, error) {
	return client.methodRegistry
}

func (client *paymentServiceClient) getBalance(data interface{}, md map[string]string) (interface{}, error) {
	ctx := monitor.GetApmContext()
	//ctx := context.Background()
	for k, v := range md {
		ctx = metadata.AppendToOutgoingContext(ctx, k, v)
	}
	return client.grpcClient.GetBalance(ctx, data.(*payment.GetBalanceRequest))
}
